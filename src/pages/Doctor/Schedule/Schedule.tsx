import React, { useState, useEffect } from 'react'
import { Calendar, dateFnsLocalizer } from 'react-big-calendar'
import { format } from 'date-fns/format'
import { parse } from 'date-fns/parse'
import { startOfWeek } from 'date-fns/startOfWeek'
import { getDay } from 'date-fns/getDay'
import { vi } from 'date-fns/locale/vi'
import 'react-big-calendar/lib/css/react-big-calendar.css'
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Box,
  Typography,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  IconButton,
  Menu,
  MenuItem,
} from '@mui/material'
import { Edit, Delete, Visibility } from '@mui/icons-material'
import {
  useGetDoctorSchedulesQuery,
  useChangeStatusScheduleMutation,
} from '../../../redux/api/api.caller' // Assuming these hooks are generated by RTK Query
import { ISchedule } from '../../../types/schedule'
import MoreVert from '@mui/icons-material/MoreVert'
// Dữ liệu sự kiện từ lịch hẹn
const convertAppointmentsToEvents = (appointments: ISchedule[]): Event[] =>
  appointments
    .filter(appointment => appointment.status !== 'CANCELLED') // Loại bỏ cancelled
    .map(appointment => {
      const appointmentDate = parse(
        appointment.appointmentDate, // Raw string date from API
        'yyyy-MM-dd HH:mm', // The format of the provided string
        new Date(),
      )
      return {
        id: appointment.id,
        title: `${appointment.name} - ${appointment.status}`,
        start: appointmentDate,
        end: new Date(appointmentDate.getTime() + 3 * 60 * 60 * 1000), // Assuming 3 hours duration
        status: appointment.status,
      }
    })
const locales = {
  vi: vi,
}

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek: () => startOfWeek(new Date(), { weekStartsOn: 1 }), // Tuần bắt đầu vào thứ 2
  getDay,
  locales,
})

interface Event {
  id: number
  title: string
  start: Date
  end: Date
  status: string
}

function Schedule() {
  const [selectedAppointment, setSelectedAppointment] =
    useState<ISchedule | null>(null)
  const [openDialog, setOpenDialog] = useState(false)
  const [status, setStatus] = useState<string>('') // Track status for mutation
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null) // For menu ancho
  const {
    data: doctorSchedulesResponse,
    isLoading,
    error,
    refetch,
  } = useGetDoctorSchedulesQuery()
  const [changeStatusSchedule] = useChangeStatusScheduleMutation()

  // Convert paginated data into events
  const events = doctorSchedulesResponse?.data?.elements
    ? convertAppointmentsToEvents(doctorSchedulesResponse.data.elements)
    : []
  console.log(events)
  const handleViewDetails = (appointment: ISchedule) => {
    setSelectedAppointment(appointment)
    setOpenDialog(true)
  }

  const handleCloseDialog = () => {
    setOpenDialog(false)
    setSelectedAppointment(null)
  }

  const handleChangeStatus = async (scheduleId: number, newStatus: string) => {
    try {
      await changeStatusSchedule({ scheduleId, status: newStatus }).unwrap()
      // Optionally refetch or update local state after status change
      refetch()
    } catch (err) {
      console.error('Error changing status', err)
    }
  }

  const handleMenuClick = (
    event: React.MouseEvent<HTMLElement>,
    appointment: ISchedule,
  ) => {
    setAnchorEl(event.currentTarget)
    setSelectedAppointment(appointment) // Store the selected appointment
  }

  const handleMenuClose = () => {
    setAnchorEl(null)
  }

  const handleStatusSelect = (statusOption: string) => {
    if (selectedAppointment) {
      handleChangeStatus(selectedAppointment.id, statusOption)
      handleMenuClose() // Close the menu after selection
    }
  }
  const statusColors = {
    PENDING: '#9e9e9e', // Gray
    CONFIRMED: '#4caf50', // Green
    CANCELLED: '#f44336', // Red
    COMPLETED: '#2196f3', // Blue
  }
  return (
    <Box sx={{ padding: '20px' }}>
      <Box sx={{ height: 500, marginBottom: '30px' }}>
        <Calendar
          localizer={localizer}
          events={events}
          startAccessor='start'
          endAccessor='end'
          style={{ height: 500 }}
          eventPropGetter={event => {
            const baseStyle = {
              borderRadius: '5px',
              width: '100%',
              margin: '0px',
            }
            if (event.status === 'PENDING') {
              return {
                style: {
                  ...baseStyle,
                  backgroundColor: 'transparent',
                  border: '2px dashed #9e9e9e',
                  color: '#9e9e9e',
                },
              }
            } else if (event.status === 'CONFIRMED') {
              return {
                style: {
                  ...baseStyle,
                  backgroundColor: '#4caf50', // Green for CONFIRMED
                  color: 'white',
                },
              }
            } else if (event.status === 'CANCELLED') {
              return {
                style: {
                  ...baseStyle,
                  backgroundColor: '#f44336', // Red for CANCELLED
                  color: 'white',
                },
              }
            } else if (event.status === 'COMPLETED') {
              return {
                style: {
                  ...baseStyle,
                  backgroundColor: '#2196f3', // Blue for COMPLETED
                  color: 'white',
                },
              }
            }
            return {}
          }}
          messages={{
            next: 'Tiếp',
            previous: 'Trước',
            today: 'Hôm nay',
            month: 'Tháng',
            week: 'Tuần',
            day: 'Ngày',
            agenda: 'Lịch trình',
          }}
          defaultView='week'
          views={['month', 'week', 'day']}
        />
      </Box>

      {/* Bảng lịch hẹn */}
      <TableContainer
        sx={{
          borderRadius: '8px',
          border: '1px solid #e0e0e0',
        }}
      >
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Bệnh nhân</TableCell>
              <TableCell>Số điện thoại</TableCell>
              <TableCell>Thời gian hẹn</TableCell>
              <TableCell>Ghi chú</TableCell>
              <TableCell>Trạng thái</TableCell>
              <TableCell align='right'>Hành động</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {doctorSchedulesResponse?.data?.elements.map(appointment => {
              const formattedDate = parse(
                appointment.appointmentDate,
                'yyyy-MM-dd HH:mm',
                new Date(),
              ).toLocaleString()
              return (
                <TableRow key={appointment.id}>
                  <TableCell>{appointment.name}</TableCell>
                  <TableCell>{appointment.phone}</TableCell>
                  <TableCell>{formattedDate}</TableCell>
                  <TableCell>{appointment.notes}</TableCell>
                  <TableCell>
                    <Chip
                      label={appointment.status}
                      sx={{
                        width: '110px',
                        backgroundColor:
                          statusColors[
                            appointment.status as keyof typeof statusColors
                          ],
                        color: 'white',
                      }}
                    />
                  </TableCell>
                  <TableCell align='right'>
                    <IconButton
                      color='primary'
                      onClick={() => handleViewDetails(appointment)}
                    >
                      <Visibility />
                    </IconButton>
                    <IconButton
                      color='primary'
                      onClick={e => handleMenuClick(e, appointment)}
                    >
                      <MoreVert />
                    </IconButton>
                    <Menu
                      anchorEl={anchorEl}
                      open={Boolean(anchorEl)}
                      onClose={handleMenuClose}
                    >
                      <MenuItem onClick={() => handleStatusSelect('CONFIRMED')}>
                        CONFIRMED
                      </MenuItem>
                      <MenuItem onClick={() => handleStatusSelect('CANCELLED')}>
                        CANCELLED
                      </MenuItem>
                    </Menu>
                  </TableCell>
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Chi tiết lịch hẹn (Dialog) */}
      <Dialog open={openDialog} onClose={handleCloseDialog}>
        <DialogTitle>Chi Tiết Lịch Hẹn</DialogTitle>
        <DialogContent>
          {selectedAppointment && (
            <>
              <Typography>Bệnh nhân: {selectedAppointment.name}</Typography>
              <Typography>
                Số điện thoại: {selectedAppointment.phone}
              </Typography>
              <Typography>Ghi chú: {selectedAppointment.notes}</Typography>
              <Typography>
                Thời gian hẹn:{' '}
                {parse(
                  selectedAppointment.appointmentDate,
                  'yyyy-MM-dd HH:mm',
                  new Date(),
                ).toLocaleString()}
              </Typography>
              <Typography>Trạng thái: {selectedAppointment.status}</Typography>
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog} color='primary'>
            Đóng
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default Schedule
